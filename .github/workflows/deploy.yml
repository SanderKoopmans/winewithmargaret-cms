name: ðŸš€ Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request: {}

permissions:
  actions: write
  contents: read

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
      
    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Autoincrement version
      run: |
        echo "NEW_PATCH_VERSION=$((${{ env.PATCH_VERSION }}+1))" >> $GITHUB_ENV

    - name: Update GH version
      uses: hmanzur/actions-set-secret@v2.0.0
      with:
        name: 'PATCH_VERSION'
        value: ${{ env.NEW_PATCH_VERSION }}
        repository: ${{ github.repository }}
        token: ${{ secrets.REPO_ACCESS_TOKEN }}

    - name: Build, tag, and push image to Amazon ECR
      if: github.ref == 'refs/heads/master'
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: wwm-strapi-api
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ secrets.PATCH_VERSION }} -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f Dockerfile.production .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ secrets.PATCH_VERSION }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Install AWS CLI and run a command
      if: github.ref == 'refs/heads/master'
      run: |
        echo "----Get aws cli----"
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        echo "----Unzip----"
        unzip awscliv2.zip
        echo "----Install----"
        sudo ./aws/install --update 
        echo "----Check aws----"
        aws --version
        echo "----Configure----"
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
        aws elasticbeanstalk create-application-version --application-name wwm-strapi-cms --version-label ${{ secrets.PATCH_VERSION }} --source-bundle S3Bucket=wwm-strapi-dockerrun,S3Key=Dockerrun.aws.json
        aws elasticbeanstalk update-environment --application-name wwm-strapi-cms --environment-name wwm-strapi-env --version-label=${{ secrets.PATCH_VERSION }}